" common settings
" hi := highlight
" colo := colorscheme

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

set tags+=./tags;/;/usr/include/c++/6.3.1/stdcpp.tags
set nocompatible
set exrc
set secure
set diffopt=iwhite
set diffopt+=context:0
set clipboard=unnamed
" 
if &diff
  colo murphy
else
  colo pablo
endif
hi Search guibg=peru guifg=wheat

" set how many lines of history VIM has to remember
set history=40

" set to auto read when a file is changed outside
set autoread

" with a map leader, it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader=";"
let g:mapleader=";"
let maplocalleader="\\"

set encoding=utf8
set fileencodings=utf-8,gbk,gb2312,cp936,usc-bom,euc-jp,gb18030
set fileencoding=utf-8

" set unix as the standard file type
set fileformat=unix
set fileformats=unix,dos,mac

" turn backup off, since most stuff is in SVN, git et.c anyway
set nobackup
set nowb
set noswapfile
" 
set nowrap
" 
set number
" always show current position
set ruler

set linebreak

" use spaces instead of tabs
set expandtab

" be smart when using tabs
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2
set softtabstop=2
set showtabline=2

" uses the indent from the previous line.
set autoindent

" like autoindent, 
" but also recognizes some C syntax to increase/reduce the indent.
set smartindent    
set cindent        " configurable to different indenting styles.
set cino=>2+2(0,W4g1h1N-2

" highlight the searched items
set hlsearch

" makes search act like search in modern browsers
set incsearch

set showmatch
set matchtime=2
set wildmenu

" set wrap
" set cursorline
set formatoptions=tcrqn 
set noerrorbells 
set linespace=0 

syntax enable
syntax on

" configure backspace so it acts as it should act
set backspace=indent,eol,start
mapclear

map <leader>e :e! ~/.vimrc<cr>
map <leader>u :source ~\.vimrc<cr>
autocmd! bufwritepost vimrc source ~/.vimrc
if has("autocmd")
  autocmd FileType xml,html,c,cc,cs,java,perl,shell,bash,cpp,python,vim,php,ruby set number
  autocmd FileType c,cc,cpp,java,bash,python
        \ if exists('+colorcolumn') |
        \   set colorcolumn=81 |
        \ else |
        \   au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1) |
        \ endif
  autocmd FileType xml,html vmap <C-o> <ESC>'<i<!--<ESC>o<ESC>'>o-->
  autocmd FileType txt set wrap
  autocmd FileType xml,html set colorcolumn=180
  autocmd FileType python set colorcolumn=81
  autocmd FileType tex set colorcolumn=161
  autocmd FileType java,c,cpp,cs vmap <C-o> <ESC>'<o
  autocmd FileType html,text,php,c,java,xml,bash,shell,perl setlocal textwidth=100
  autocmd Filetype xsl source $VIMRUNTIME/plugin/closetag.vim
  autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \ exe " normal g`\"" |
        \ endif
  autocmd BufWrite *.py,*.c,*.cpp,*.h,*.cc,*.mk,makefile,*.js,*.tex,*.dart :call DeleteTrailingWS()
  autocmd BufWrite *.coffee :call DeleteTrailingWS()
  autocmd BufWrite,BufNewFile *.dart set filetype=dart
endif "has("autocmd") 

" set gfn=Monospace\ 10

" use space key to turn on/off the fold.
set foldenable 

" add a bit extra margin to the left
set foldcolumn=0
set foldlevel=4

set foldmethod=syntax
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc':'zo')<CR> 

let g:miniBufExplMapWindowNavVim = 1 
let g:miniBufExplMapWindowNavArrows = 1 
let g:miniBufExplMapCTabSwitchBufs = 1 

" gui setting.
set guioptions-=T
set guioptions-=m
" set guifont=Monospace\ Regular\ 10
" set guifont=Consolas

" no annoying sound on errors
set noerrorbells
set novisualbell
set tm=500

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
map 0 ^

nmap <leader>y "+y
nmap <leader>w :w!<cr>
nmap <leader>x :x<cr>
nmap <leader>t :tabe %:p:h<cr>
nmap <leader>s :vs %:p:h<cr>
nmap <leader>o :sp %:p:h<cr>
nmap <leader>q :q!<cr>
nmap <leader>p <alt><tab><f5><alt><tab>
nmap <leader>k :YcmDiags<cr>
nmap <leader>c ^i// <esc>
nmap <leader>n ^3x
nmap <leader>h :vert help<cr>
nmap to :TrinityToggleAll<cr>
nmap <C-=> <C-W>=

" opens a new tab with the current buffer's path
" map <leader>te :tabe <c-r>=expand("%")<cr>/

" switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

vnoremap // y/<C-R>"<CR>
" copy selected content to clipboard
vnoremap <leader>y "+y
" paste copied content from clipboard
vnoremap <leader>p "+p

" smart way to switch between windows

set switchbuf=useopen,usetab

